/!\ update utils to make the particle effect use filterColored texture
/!\ create documentation for utils.py

============================================
MAIN
============================================
- Doc containing sizes of each image sprites
- Installation of tools (PyCharm + Initial code + running first)
- Presentation of the environment (process.py : __init__, setup, update, draw) + game loop
- Presentation of the Class fields (access to these variables in all the process.py file) + self keywoard
- Presentation of the Sprites objects, creation + members (center_x,center_y,scale_x,_scale_y, draw(), update_animation())
- Information on creating new methods for each functionality (creation, draw, update, ...)
- Information on keeping a list of all the variables (types, names, descriptions, ...)
- Follow steps to create the game



============================================
SINGLE SPRITE MOVE
============================================
 1 - single sprite + draw (creation + draw)
    > constants size of char(W,H)
    > createCharacter()
    > drawCharacter()

 2 - add position variable + update center_x/center_y
   - key event to update position + update sprite onto position + draw sprite
    > add position
    > add key pressed (move is not smooth)
    > add moves booleans + SPEED + deltaTime parameter
    > add update position and update keypress code

 3 - add limitation on screen borders
    > update updateCharacter function

 4 - controller event to update position
    > just update gamepad event function using axis "X" and analog value > 0.5

============================================
BACKGROUND DISPLAY
============================================
 5 - add background sprite (HD ratio)
    > Create sprite abec display it (create/draw)

============================================
ANIMATED CHARACTER
============================================
 6 - load animation 'run'
    > just change parameter object and call to animated function
    > add update_animation sprite in updatecharacter method

 7 - load animation idle and store both in memory : update one of them according to movement
    > modify updateCharacter function to do that
    > Load also flipped_horizontal animations in memory

 8 - add variable to store last move direction
    > modify last direction when moving in one direction
    > use last direction to select correct animation

============================================
ITEMS
============================================
 9 - Item creations and display
    > add init function to create list
    > add generation function to create random position on top of the window and random speed
    > create anim sprite
    > use set_texture for the animated sprite to choose image
    > draw function to draw all the sprites from list

10 - Item moving and destruction
    > update function to make the item goes down (@speed)
    > remove item when leaving area (bottom)

============================================
BOX COLLISION
============================================
11 - box collisions between items and character
    > creat box/box collision function
    > create variables for item and char sizes (or ratio from sprite sizes)
    > add function that checks collisions and remove items when colliding with player

============================================
SCORE and LIFE
============================================
12 - Score management
    > add score variable
    > update score when player catches items (when collision is ok)
    > add score text display

13 - Life Management
    > add Life variable + init life constant
    > update life when item leaves area
    > add life text display

============================================
ITEM GENERATION
============================================
14 - Item automatic generation
    > add counter variable for generation
    > add constant for generation interval
    > Update method that is called when pressing SPACE (give deltatime in parameter)
    > generate items regularly (add timer)

============================================
END OF GAME
============================================
15 - end management
    > state variable with 3 states "ready/running/finished"
    > create isRunning, isReady, isFinished, startGame, stopGame, rewindGame functions
    > Function that checks any key press or any button pressed to switch from "finished" state to "ready" state
    > start button or ENTER to go from "ready" to "running"
    > only generates items if game is running and not ended
    > only catch items if in running state

16 - display HUD (text)
    > display start message when "ready" to play (waiting for start button)
    > display end message (with score) when finished
    > make the start message blink using the system time (e.g. one second period)

============================================
HIGH SCORES
============================================
17 - Handle high scores
    > read a file to get high scores (use of pickle)
    > display high scores at game start
    > save high scores in file when a game is ended (use pickle)
    > only keep the 10 greatest values

============================================
SOUNDS
============================================
18 - handle sounds
    > Create and play sound when catching an item
    > Create and play sound when missing an item



============================================
DISPLAY FEATURES
============================================
101 - Make the items turn
    > use the angle property of the sprite object to make the items turn

102 - Visual effects
    > create particle effect or sprite animation when catching an item
    > create particle effect or sprite animation when missing  an item
    > create particle effect when character is moving

103 - Use of sprites to display a life bar
    > add life bar sprites
    > function to display bar according to life variable
    > modify color according to life using "filterColor" (e.g. from red to green)

103 - Create parallax background
    > compute offset for each layer
    > display layers in correct order + exclude some displays depending on game play (front layer displayed after character, ...)
    > modify item positions according to parallax offset (each item must have a xRef value) + bursts

104 - Add some random clouds
    > function to generate clouds periodically
    > each cloud has a different appearance and a speed value
    > each cloud has to be parallax-compatible (x position reference)



============================================
GAME FEATURES
============================================
201 + Make the items go up and down
    > make the items first go up while the collision is not enabled
    > the item may be darker or more transparent
    > when the item reached the top of the screen it goes back down (and collision is now enabled to catch it)
    > speed of the item is still used
    > use of an additional variable (boolean) or time reference (float) to know if the item has to go up or down

202 - make the player goes fast
    > enabled when holding key/button (e.g. SPACE or any button, but not MENU button nor ENTER key)
    > when enabled, changing direction is not possible anymore

203 - Use of pseudo random
    > code your own pseudo random number generator
    > use it to generate item X reference positions in always the same order
    >
